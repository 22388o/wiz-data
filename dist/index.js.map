{"version":3,"sources":["webpack://[name]/webpack/bootstrap","webpack://[name]/./src/hex.ts","webpack://[name]/./src/const/index.ts","webpack://[name]/./src/bytes.ts","webpack://[name]/./src/number.ts","webpack://[name]/./src/index.ts","webpack://[name]/./src/WizData.ts","webpack://[name]/./src/bin.ts","webpack://[name]/./src/string.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","hexFixBytes","hex","length","padStart","Math","ceil","validHex","test","hexLE","bytesToHex","hexToBytes","reverse","Uint8Array","from","matches","match","map","hexToHexBytes","byte","parseInt","hexToByte","hexBoundaries","bytesLength","b1","pow","b2","minPos","maxPos","minNeg","maxNeg","MAX_INTEGER","bytes","reduce","hexString","currentByte","validByte","toString","byteToHex","bytesToString","out","pos","c1","String","fromCharCode","c2","u","c3","join","bytesToNumber","numberIsValid","boundaries","undefined","numberHex","bytesToBin","bin","log","base","x","numeralNextValue","numeral","nextValue","numberToBytes","byteLength","floor","uint8Array","resizedUint8Array","maxNumber","fill","set","resizeBytes","baseNumber","lastValue","numeralArray","push","uint8NumberToBytes","WizData","number","text","inputVal","bytesVal","binVal","hexVal","numberVal","textVal","binToBytes","stringToBytes","this","input","fromHex","fromBin","fromNumber","fromText","binFixBytes","validBin","binToBinBytes","binByte","binToByte","charCodeAt"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import { bytesToHex } from \"./bytes\";\r\n\r\nexport const hexFixBytes = (hex: string) => (hex.length % 2 === 0 ? hex : hex.padStart(Math.ceil(hex.length / 2) * 2, \"0\"));\r\n\r\nconst validHex = (hex: string) => hex.length % 2 === 0 && !/[^a-fA-F0-9]/u.test(hex);\r\n\r\nexport const hexLE = (hex: string): string => bytesToHex(hexToBytes(hex).reverse());\r\n\r\nconst hexToHexBytes = (hex: string): string[] => {\r\n  if (!validHex(hex)) throw \"hexToHexBytes: invalid hex string\";\r\n  const matches: RegExpMatchArray | null = hex.match(/.{1,2}/g);\r\n  if (matches === null) return [];\r\n  return matches.map((match: string) => match);\r\n};\r\n\r\nconst hexToByte = (hex: string): number => {\r\n  if (!validHex(hex)) throw \"hexToByte: invalid hex string\";\r\n  return parseInt(hex, 16);\r\n};\r\n\r\nexport const hexToBytes = (hex: string): Uint8Array => Uint8Array.from(hexToHexBytes(hex).map((byte) => hexToByte(byte)));\r\n\r\n// const hexToString = (hex: string): string => bytesToString(hexToBytes(hex));\r\n\r\ninterface NumberBoundries {\r\n  minPos: number;\r\n  maxPos: number;\r\n  minNeg: number;\r\n  maxNeg: number;\r\n}\r\n\r\nexport const hexBoundaries = (bytesLength: number): NumberBoundries | undefined => {\r\n  // 2^(8n-9) <= x <= 2^(8n-1) - 1\r\n  // -2(8n-9) >= x >= -2^(8n-1) + 1\r\n\r\n  const b1 = Math.pow(2, 8 * bytesLength - 9);\r\n  const b2 = Math.pow(2, 8 * bytesLength - 1);\r\n\r\n  if (0 < bytesLength && bytesLength < 5) {\r\n    return {\r\n      minPos: b1,\r\n      maxPos: b2 - 1,\r\n      minNeg: 1 - b2,\r\n      maxNeg: -1 * b1,\r\n    };\r\n  }\r\n\r\n  return;\r\n};\r\n","export const MAX_INTEGER = 2147483647;\r\n","import { hexBoundaries, hexLE } from \"./hex\";\r\nimport { numberIsValid } from \"./number\";\r\n\r\nconst validByte = (byte: number): boolean => 0 <= byte || byte <= 255;\r\n\r\n// const bytesLE = (bytes: Uint8Array): Uint8Array => bytes.reverse();\r\n\r\nconst byteToHex = (byte: number): string => {\r\n  if (!validByte(byte)) throw \"byteToHex: invalid byte number\";\r\n  return byte.toString(16).padStart(2, \"0\");\r\n};\r\n\r\nexport const bytesToHex = (bytes: Uint8Array): string => bytes.reduce((hexString, currentByte) => hexString + byteToHex(currentByte), \"\");\r\n\r\n/**\r\n * This implementations is derived from:\r\n * https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js\r\n *\r\n * Copyright 2008 The Closure Library Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport const bytesToString = (bytes: Uint8Array): string => {\r\n  const out: string[] = [];\r\n  let pos: number = 0,\r\n    c: number = 0;\r\n  while (pos < bytes.length) {\r\n    const c1: number = bytes[pos++];\r\n    if (c1 < 128) {\r\n      out[c++] = String.fromCharCode(c1);\r\n    } else if (c1 > 191 && c1 < 224) {\r\n      const c2: number = bytes[pos++];\r\n      out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));\r\n    } else if (c1 > 239 && c1 < 365) {\r\n      // Surrogate Pair\r\n      const c2: number = bytes[pos++];\r\n      const c3: number = bytes[pos++];\r\n      const c4: number = bytes[pos++];\r\n      const u: number = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) - 0x10000;\r\n      out[c++] = String.fromCharCode(0xd800 + (u >> 10));\r\n      out[c++] = String.fromCharCode(0xdc00 + (u & 1023));\r\n    } else {\r\n      const c2: number = bytes[pos++];\r\n      const c3: number = bytes[pos++];\r\n      out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));\r\n    }\r\n  }\r\n  return out.join(\"\");\r\n};\r\n\r\nexport const bytesToNumber = (bytes: Uint8Array): number | undefined => {\r\n  if (bytes.length == 0) return 0;\r\n  if (4 < bytes.length) return;\r\n\r\n  const hex = bytesToHex(bytes);\r\n  if (!numberIsValid(hex, bytes.length)) return;\r\n\r\n  const boundaries = hexBoundaries(bytes.length);\r\n  if (boundaries === undefined) return;\r\n\r\n  const numberHex: number = parseInt(hexLE(hex), 16);\r\n  if ((boundaries.minPos <= numberHex && numberHex <= boundaries.maxPos) || numberHex === 0) return numberHex;\r\n\r\n  // if (boundaries.minNeg <= numberHex && numberHex <= boundaries.maxNeg)\r\n  return Math.pow(2, 8 * bytes.length - 1) - numberHex;\r\n};\r\n\r\nexport const bytesToBin = (bytes: Uint8Array): string => bytes.reduce((bin, byte) => byte.toString(2).padStart(8, \"0\") + bin, \"\");\r\n","import { hexLE } from \"./hex\";\r\n\r\nconst BIT_8 = 8;\r\nconst BIT_16 = 16;\r\nconst BIT_32 = 32;\r\n\r\nconst log = (base: number, x: number): number => Math.log(x) / Math.log(base);\r\n\r\nconst numberByteLength = (x: number): number => {\r\n  if (x === 0) return 0;\r\n  else if (0 < x) return Math.ceil((log(2, x + 1) + 1) / 8);\r\n  else if (x < 0) return Math.floor((log(2, -x) + 1) / 8 + 1);\r\n  return 0;\r\n};\r\n\r\nconst resizeBytes = (uint8Array: Uint8Array, byteLength: number): Uint8Array => {\r\n  const resizedUint8Array: Uint8Array = new Uint8Array(byteLength);\r\n  if (uint8Array.length > byteLength) {\r\n    const maxNumber: number = Math.pow(2, BIT_8) - 1;\r\n    resizedUint8Array.fill(maxNumber);\r\n  } else {\r\n    resizedUint8Array.set(uint8Array);\r\n  }\r\n  return resizedUint8Array;\r\n};\r\n\r\nconst numeralNextValue = (value: number, base: number): { numeral: number; nextValue: number } => {\r\n  const numeral: number = value % base;\r\n  const nextValue: number = (value - numeral) / base;\r\n  return { numeral, nextValue };\r\n};\r\n\r\nconst uint8NumberToBytes = (value: number): Uint8Array => {\r\n  const baseNumber: number = Math.pow(2, BIT_8);\r\n  let lastValue: number = value;\r\n  const numeralArray: number[] = [];\r\n\r\n  while (lastValue >= baseNumber) {\r\n    const { numeral, nextValue } = numeralNextValue(lastValue, baseNumber);\r\n    numeralArray.push(numeral);\r\n    lastValue = nextValue;\r\n  }\r\n\r\n  if (lastValue > 0) numeralArray.push(lastValue);\r\n  const result: Uint8Array = Uint8Array.from(numeralArray);\r\n  return result;\r\n};\r\n\r\nexport const numberToBytes = (value: number): Uint8Array => {\r\n  const byteLength: number = numberByteLength(value);\r\n  const inputNumber: number = value < 0 ? Math.pow(2, 8 * byteLength - 1) - value : value;\r\n  const uint8NumberBytes: Uint8Array = uint8NumberToBytes(inputNumber);\r\n  return resizeBytes(uint8NumberBytes, byteLength);\r\n};\r\n\r\nexport const numberIsValid = (hex: string, byteLength: number): boolean => {\r\n  const numberHex: number = parseInt(hexLE(hex), 16);\r\n\r\n  // 1 byte\r\n  // n = 0x00\r\n  // n = 0x80\r\n  if (byteLength === 1) if (0x00 == numberHex || 0x80 == numberHex) return false;\r\n\r\n  // 2 byte\r\n  // 0x0001 <= n <= 0x007f\r\n  // 0x8000 <= n <= 0x807f\r\n  if (byteLength === 2) if ((0x0001 <= numberHex && numberHex <= 0x007f) || (0x8000 <= numberHex && numberHex <= 0x807f)) return false;\r\n\r\n  // 3 byte\r\n  // 0x000001 <= n <= 0x007fff\r\n  // 0x800000 <= n <= 0x807fff\r\n  if (byteLength === 3) if ((0x000001 <= numberHex && numberHex <= 0x007fff) || (0x800000 <= numberHex && numberHex <= 0x807fff)) return false;\r\n\r\n  // 4 byte\r\n  // 0x00000001 <= n <= 0x007fffff\r\n  // 0x80000000 <= n <= 0x807fffff\r\n  if (byteLength === 4) if ((0x00000001 <= numberHex && numberHex <= 0x007fffff) || (0x80000000 <= numberHex && numberHex <= 0x807fffff)) return false;\r\n\r\n  return true;\r\n};\r\n","import { MAX_INTEGER } from \"./const\";\r\nimport { WizData } from \"./WizData\";\r\n\r\nexport default WizData;\r\nexport { MAX_INTEGER };\r\n","import { MAX_INTEGER } from \"./const\";\r\nimport { binToBytes } from \"./bin\";\r\nimport { bytesToBin, bytesToHex, bytesToNumber } from \"./bytes\";\r\nimport { hexToBytes } from \"./hex\";\r\nimport { numberToBytes } from \"./number\";\r\nimport { stringToBytes } from \"./string\";\r\n\r\nexport class WizData {\r\n  input: string | number;\r\n  // output: string | number;\r\n\r\n  bytes: Uint8Array;\r\n  bin: string;\r\n  hex: string;\r\n\r\n  number?: number;\r\n  text?: string;\r\n\r\n  private constructor(hex?: string, bin?: string, number?: number, text?: string) {\r\n    let inputVal: string | number = \"\";\r\n    let outputVal: string | number = \"\";\r\n\r\n    let bytesVal: Uint8Array = new Uint8Array([]);\r\n    let binVal: string = \"\";\r\n    let hexVal: string = \"\";\r\n\r\n    let numberVal: number | undefined = undefined;\r\n    let textVal: string | undefined = undefined;\r\n\r\n    // const emptyBytePrefix: string = \"0x\";\r\n\r\n    // fromHex\r\n    if (hex !== undefined) {\r\n      inputVal = hex;\r\n      bytesVal = hexToBytes(hex);\r\n      binVal = bytesToBin(bytesVal);\r\n      hexVal = hex;\r\n      numberVal = bytesToNumber(bytesVal);\r\n      // textVal = bytesToString(bytesVal); // TODO get from stack cache\r\n    }\r\n\r\n    // fromBin\r\n    else if (bin !== undefined) {\r\n      inputVal = bin;\r\n      bytesVal = binToBytes(bin);\r\n      binVal = bin;\r\n      hexVal = bytesToHex(bytesVal);\r\n      numberVal = bytesToNumber(bytesVal);\r\n      // textVal = bytesToString(bytesVal); // TODO get from stack cache\r\n    }\r\n\r\n    // fromNumber\r\n    else if (number !== undefined) {\r\n      inputVal = number;\r\n      bytesVal = numberToBytes(number);\r\n      binVal = bytesToBin(bytesVal);\r\n      hexVal = bytesToHex(bytesVal);\r\n      numberVal = number;\r\n      // textVal = bytesToString(bytesVal); // TODO get from stack cache\r\n    }\r\n\r\n    // fromText\r\n    else if (text !== undefined) {\r\n      inputVal = text;\r\n      bytesVal = stringToBytes(text);\r\n      binVal = bytesToBin(bytesVal);\r\n      hexVal = bytesToHex(bytesVal);\r\n      numberVal = bytesToNumber(bytesVal);\r\n      textVal = text; // TODO set to stack cache\r\n    }\r\n\r\n    // set props\r\n    this.input = inputVal;\r\n    this.bytes = bytesVal;\r\n    this.bin = binVal;\r\n    this.hex = hexVal;\r\n    if (numberVal !== undefined && -MAX_INTEGER <= numberVal && numberVal <= MAX_INTEGER) this.number = numberVal;\r\n    this.text = textVal;\r\n\r\n    /* if (this.text !== undefined) outputVal = this.text;\r\n    else if (this.number !== undefined) outputVal = this.number;\r\n    else outputVal = emptyBytePrefix + this.hex;\r\n    this.output = outputVal; */\r\n  }\r\n\r\n  public static fromHex(hex: string): WizData {\r\n    return new WizData(hex, undefined, undefined, undefined);\r\n  }\r\n\r\n  public static fromBin(bin: string): WizData {\r\n    return new WizData(undefined, bin, undefined, undefined);\r\n  }\r\n\r\n  public static fromNumber(number: number): WizData {\r\n    return new WizData(undefined, undefined, number, undefined);\r\n  }\r\n\r\n  public static fromText(text: string): WizData {\r\n    return new WizData(undefined, undefined, undefined, text);\r\n  }\r\n}\r\n","export const binFixBytes = (bin: string): string => (bin.length % 8 === 0 ? bin : bin.padStart(Math.ceil(bin.length / 8) * 8, \"0\"));\r\n\r\nconst validBin = (bin: string): boolean => !/[^01]/u.test(bin) && bin.length % 8 === 0;\r\n\r\nconst binToBinBytes = (bin: string): string[] => {\r\n  if (!validBin(bin)) throw \"binToBinBytes: invalid bin string\";\r\n  const matches: RegExpMatchArray | null = bin.match(/.{1,8}/g);\r\n  if (matches === null) return [];\r\n  return matches.map((match: string) => match);\r\n};\r\n\r\nconst binToByte = (bin: string): number => parseInt(bin, 2);\r\n\r\nexport const binToBytes = (bin: string) =>\r\n  Uint8Array.from(\r\n    binToBinBytes(bin)\r\n      .reverse()\r\n      .map((binByte) => binToByte(binByte))\r\n  );\r\n","/* import { bytesToHex } from \"./bytes\"; */\r\n\r\n/**\r\n * This implementations is derived from:\r\n * https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js\r\n *\r\n * Copyright 2008 The Closure Library Authors. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\nexport const stringToBytes = (text: string): Uint8Array => {\r\n  const out: number[] = [];\r\n  let p: number = 0;\r\n  for (let i = 0; i < text.length; i++) {\r\n    let c: number = text.charCodeAt(i);\r\n    if (c < 128) {\r\n      out[p++] = c;\r\n    } else if (c < 2048) {\r\n      out[p++] = (c >> 6) | 192;\r\n      out[p++] = (c & 63) | 128;\r\n    } else if ((c & 0xfc00) === 0xd800 && i + 1 < text.length && (text.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {\r\n      c = ((c & 0x03ff) << 10) + 0x10000 + (text.charCodeAt((i += 1)) & 0x03ff);\r\n      out[p++] = (c >> 18) | 240;\r\n      out[p++] = ((c >> 12) & 63) | 128;\r\n      out[p++] = ((c >> 6) & 63) | 128;\r\n      out[p++] = (c & 63) | 128;\r\n    } else {\r\n      out[p++] = (c >> 12) | 224;\r\n      out[p++] = ((c >> 6) & 63) | 128;\r\n      out[p++] = (c & 63) | 128;\r\n    }\r\n  }\r\n  return new Uint8Array(out);\r\n};\r\n\r\n// export const stringToHex = (text: string): string => bytesToHex(stringToBytes(text));\r\n"],"sourceRoot":""}